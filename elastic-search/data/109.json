{"content": "Whenever an interesting event occurs, the EventSourceClass must notify all of the listeners for that event that it knows about by calling the notification method that exist for that purpose. All of the notification methods (in this example there is only one, interestingEventOccurred) have been grouped together by topic in a listener interface: InterestingEventListener, which implements java.util.EventListener and is named according to the Event Model conventions. This interface must be implemented by all event listener classes (in this case only InterestingEventListenerImpl). Because EventSourceClass must be able to notify any interested listeners, it must be possible to register them. For this purpose the EventSourceClass has an addInterestingEventListener method. And since it is required, there is a removeInterestingEventListener method as well.\n", "stemmed": "whenev interest event occur , eventsourceclass must notifi listen event know call notif method exist purpos . all notif method ( exampl one , interestingeventoccur ) group togeth topic listen interfac : interestingeventlisten , implement java.util.eventlisten name accord event model convent . thi interfac must implement event listen class ( case interestingeventlistenerimpl ) . becaus eventsourceclass must abl notifi interest listen , must possibl regist . for purpos eventsourceclass addinterestingeventlisten method . and sinc requir , removeinterestingeventlisten method well .", "link": "https://en.wikibooks.org/wiki/Java_Programming/Event_Handling"}