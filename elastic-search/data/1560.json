{"content": "Java was long criticized for the need to explicitly type-cast an element when it was taken out of a \"container/collection\" class. There was no way to enforce that a \"collection\" class contains only one type of object (e.g., to forbid at compile time that an Integer object is added to a Collection that should only contain Strings). This is possible since Java 1.5.\nIn the first couple of years of Java evolution, Java did not have a real competitor. This has changed by the appearance of Microsoft C#. With Generics Java is better suited to compete against C#.\nSimilar constructs to Java Generics exist in other languages, see Generic programming for more information.\nGenerics were added to the Java language syntax in version 1.5. This means that code using Generics will not compile with Java 1.4 and less.\nUse of generics is optional. For backwards compatibility with pre-Generics code, it is okay to use generic classes without the generics type specification (<T>). In such a case, when you retrieve an object reference from a generic object, you will have to manually cast it from type Object to the correct type.\n", "stemmed": "java long critic need explicitli type-cast element taken `` container/collect '' class . there way enforc `` collect '' class contain one type object ( e.g. , forbid compil time integ object ad collect contain string ) . thi possibl sinc java 1.5 . In first coupl year java evolut , java real competitor . thi chang appear microsoft C # . with gener java better suit compet C # . similar construct java gener exist languag , see gener program inform . gener ad java languag syntax version 1.5 . thi mean code use gener compil java 1.4 less . use gener option . for backward compat pre-gener code , okay use gener class without gener type specif ( < T > ) . In case , retriev object refer gener object , manual cast type object correct type .", "link": "https://en.wikibooks.org/wiki/Java_Programming/Generics"}