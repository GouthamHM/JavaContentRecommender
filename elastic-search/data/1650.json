{"content": "On the other hand, an application that relies on JNI loses the platform portability Java offers. So you will have to write a separate implementation of JNI code for each platform and have Java detect the operating system and load the correct one at runtime. Many of the standard library classes depend on JNI to provide functionality to the developer and the user (file I/O, sound capabilities...). Including performance- and platform-sensitive API implementations in the standard library allows all Java applications to access this functionality in a safe and platform-independent manner. Only applications and signed applets can invoke JNI. JNI should be used with caution. Subtle errors in the use of JNI can destabilize the entire JVM in ways that are very difficult to reproduce and debug. Error checking is a must or it has the potential to crash the JNI side and the JVM.\n", "stemmed": "On hand , applic reli jni lose platform portabl java offer . So write separ implement jni code platform java detect oper system load correct one runtim . mani standard librari class depend jni provid function develop user ( file i/o , sound capabl ... ) . includ performance- platform-sensit api implement standard librari allow java applic access function safe platform-independ manner . onli applic sign applet invok jni . jni use caution . subtl error use jni destabil entir jvm way difficult reproduc debug . error check must potenti crash jni side jvm .", "link": "https://en.wikibooks.org/wiki/Java_Programming/Java_Native_Interface"}