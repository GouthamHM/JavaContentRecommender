{"content": "While it is true that this class could be implemented in other ways, such as simply storing the coordinates of the two points and computing the distance as \n\n\n\n\n\n(\n\nx\n\n1\n\n\n\u2212\n\nx\n\n0\n\n\n\n)\n\n2\n\n\n+\n(\n\ny\n\n1\n\n\n\u2212\n\ny\n\n0\n\n\n\n)\n\n2\n\n\n\n\n\n\n{\\displaystyle {\\sqrt {(x_{1}-x_{0})^{2}+(y_{1}-y_{0})^{2}}}}\n\n, this class instead uses the existing java.awt.Point class. This choice matches the abstract definition of this class: to print the distance between two points on the plane. We take advantage of existing behavior already implemented in the Java platform rather than implementing it again. We will see later how to make the program more flexible without adding much complexity, because we choose to use object abstractions here. However, the key point is that this class uses information hiding. That is, how the class stores its state or how it computes the distance is hidden. We can change this implementation without altering how clients use and invoke the class.\n", "stemmed": "while true class could implement way , simpli store coordin two point comput distanc ( x 1 \u2212 x 0 ) 2 + ( 1 \u2212 0 ) 2 { \\displaystyl { \\sqrt { ( x_ { 1 } -x_ { 0 } ) ^ { 2 } + ( y_ { 1 } -y_ { 0 } ) ^ { 2 } } } } , class instead use exist java.awt.point class . thi choic match abstract definit class : print distanc two point plane . We take advantag exist behavior alreadi implement java platform rather implement . We see later make program flexibl without ad much complex , choos use object abstract . howev , key point class use inform hide . that , class store state comput distanc hidden . We chang implement without alter client use invok class .", "link": "https://en.wikibooks.org/wiki/Java_Programming/Understanding_a_Java_Program"}