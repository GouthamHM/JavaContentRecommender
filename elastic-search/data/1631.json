{"content": "JUnit's are unit test cases, used to test the Java programs. Now you know how to test a private method using Reflection in JUnit.\nThere's a long-standing debate on whether testing private members is a good habit[1];There are cases where you want to make sure a class exhibited the right behavior while not making the fields that need checking to assert that public (as it's generally considered bad practice to create accessors to a class just for the sake of a unit test). There are also cases when you can greatly simplify a test case by using reflection to test all smaller private methods (and their various branches), then test the main function. \nWith dp4j it is possible to test private members without directly using the Reflection API but simply accessing them as if they were accessible from the testing method; dp4j injects the needed Reflection code at compile-time[2].\n", "stemmed": "junit 's unit test case , use test java program . now know test privat method use reflect junit . there 's long-stand debat whether test privat member good habit [ 1 ] ; there case want make sure class exhibit right behavior make field need check assert public ( 's gener consid bad practic creat accessor class sake unit test ) . there also case greatli simplifi test case use reflect test smaller privat method ( variou branch ) , test main function . with dp4j possibl test privat member without directli use reflect api simpli access access test method ; dp4j inject need reflect code compile-tim [ 2 ] .", "link": "https://en.wikibooks.org/wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection"}